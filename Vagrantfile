# This file is largely generated by GPT-4o/Claude.

# Required plugins:
# vagrant plugin install vagrant-vbguest

Vagrant.configure("2") do |config|
  config.vm.box = "gusztavvargadr/windows-11"
  config.vm.communicator = "winrm"
  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"

  # Guest Additions are already installed with the box. If this ever changes in the
  # future (or you want to use a different box), uncomment the following section,
  # as well as the section labeled "Install VirtualBox Guest Additions if not 
  # already installed", to manually install Guest Additions.
  
  # Enable the VirtualBox Guest Additions
  # config.vbguest.auto_update = true
  # config.vbguest.no_remote = false

  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    vb.memory = 4096
    vb.customize ["modifyvm", :id, "--vram", "128"]
  end    

  # First network interface (NAT) is default
  # Second network interface (host-only)
  config.vm.network "private_network", ip: "192.168.50.4"

  # # Install VirtualBox Guest Additions if not already installed
  # config.vm.provision "shell", inline: <<-SHELL
  #   # Check if VirtualBox Guest Additions is already installed
  #   $guestAdditionsInstalled = Test-Path "C:\\Program Files\\Oracle\\VirtualBox Guest Additions"
    
  #   if (-not $guestAdditionsInstalled) {
  #     Write-Host "Installing VirtualBox Guest Additions..."
      
  #     # Create directory for Guest Additions ISO
  #     New-Item -Path "C:\\Windows\\Temp\\VBoxGuestAdditions" -ItemType Directory -Force | Out-Null
      
  #     # Mount the Guest Additions ISO
  #     $certutil = Start-Process -FilePath "certutil.exe" -ArgumentList "-urlcache -split -f https://download.virtualbox.org/virtualbox/7.0.14/VBoxGuestAdditions_7.0.14.iso C:\\Windows\\Temp\\VBoxGuestAdditions.iso" -Wait -PassThru
      
  #     # Mount the ISO
  #     $mountResult = Mount-DiskImage -ImagePath "C:\\Windows\\Temp\\VBoxGuestAdditions.iso" -PassThru
  #     $driveLetter = ($mountResult | Get-Volume).DriveLetter
      
  #     # Install Guest Additions silently
  #     Start-Process -FilePath "$($driveLetter):\\VBoxWindowsAdditions.exe" -ArgumentList "/S" -Wait
      
  #     # Unmount the ISO
  #     Dismount-DiskImage -ImagePath "C:\\Windows\\Temp\\VBoxGuestAdditions.iso"
      
  #     # Clean up
  #     Remove-Item -Path "C:\\Windows\\Temp\\VBoxGuestAdditions.iso" -Force
      
  #     Write-Host "VirtualBox Guest Additions installation complete. Reboot required."
  #   } else {
  #     Write-Host "VirtualBox Guest Additions is already installed."
  #   }
  # SHELL

  # Create a new user
  config.vm.provision "shell", inline: <<-SHELL
    New-LocalUser -Name "user" -Password (ConvertTo-SecureString "user" -AsPlainText -Force)
    Add-LocalGroupMember -Group "Administrators" -Member "user"
    
    # Set the password to never expire
    Set-LocalUser -Name "user" -PasswordNeverExpires $true
    
    Write-Host "User 'user' created with password that never expires"
  SHELL
  
  # Configure automatic login for the user
  config.vm.provision "shell", inline: <<-SHELL
    # Set registry keys for auto-login
    $RegPath = "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"
    Set-ItemProperty -Path $RegPath -Name "AutoAdminLogon" -Value "1" -Type String
    Set-ItemProperty -Path $RegPath -Name "AutoLogonCount" -Value "1" -Type String
    Set-ItemProperty -Path $RegPath -Name "DefaultUsername" -Value "user" -Type String
    Set-ItemProperty -Path $RegPath -Name "DefaultPassword" -Value "user" -Type String
    
    # Disable the lock screen
    $RegPath = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Personalization"
    if (-not (Test-Path $RegPath)) {
        New-Item -Path $RegPath -Force | Out-Null
    }
    Set-ItemProperty -Path $RegPath -Name "NoLockScreen" -Value 1 -Type DWord
    
    # Disable require sign-in when PC wakes
    $RegPath = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Power\\PowerSettings\\0e796bdb-100d-47d6-a2d5-f7d2daa51f51"
    if (-not (Test-Path $RegPath)) {
        New-Item -Path $RegPath -Force | Out-Null
    }
    Set-ItemProperty -Path $RegPath -Name "ACSettingIndex" -Value 0 -Type DWord
    Set-ItemProperty -Path $RegPath -Name "DCSettingIndex" -Value 0 -Type DWord
    
    Write-Host "Automatic login configured for user 'user'"
  SHELL

  # Disable BitLocker encryption
  config.vm.provision "shell", inline: <<-SHELL
    # Disable BitLocker on the C: drive if it's enabled
    $BitLockerStatus = Get-BitLockerVolume -MountPoint "C:" -ErrorAction SilentlyContinue
    if ($BitLockerStatus -and $BitLockerStatus.ProtectionStatus -eq "On") {
      Write-Host "Disabling BitLocker on C: drive..."
      Disable-BitLocker -MountPoint "C:"
    } else {
      Write-Host "BitLocker is not enabled on C: drive. No action needed."
    }

    # Disable BitLocker auto-encryption for new drives
    $path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\FVE"
    if (-not (Test-Path $path)) {
      New-Item -Path $path -Force | Out-Null
    }
    Set-ItemProperty -Path $path -Name "DisableDeviceEncryption" -Value 1 -Type DWord -Force
    
    # Disable BitLocker service
    Set-Service -Name "BDESVC" -StartupType Disabled
  SHELL

  # Copy agent.exe from host to guest
  config.vm.provision "file", source: "dist/agent.exe", destination: "C:/agent.exe"

  # Run agent.exe on user login instead of system startup (makes the console visible)
  config.vm.provision "shell", inline: <<-SHELL
    # Create a scheduled task that runs when user logs in
    $action = New-ScheduledTaskAction -Execute "C:\\agent.exe"
    
    # Trigger on user logon
    $trigger = New-ScheduledTaskTrigger -AtLogOn -User "user"
    
    # Create task with user's credentials
    $principal = New-ScheduledTaskPrincipal -UserId "user" -LogonType Interactive -RunLevel Highest
    
    # Register the task with these settings
    Register-ScheduledTask -TaskName "AgentStartup" -Action $action -Trigger $trigger -Principal $principal -Force
    
    Write-Host "Agent scheduled to run when user 'user' logs in"
  SHELL

  # Place agent.exe in the user's startup folder
  # config.vm.provision "shell", inline: <<-SHELL
  #   # Ensure the startup folder exists
  #   $startupFolder = "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"
  #   if (-not (Test-Path $startupFolder)) {
  #     New-Item -Path $startupFolder -ItemType Directory -Force | Out-Null
  #     Write-Host "Created startup folder: $startupFolder"
  #   }
    
  #   # Copy agent.exe to the startup folder
  #   Copy-Item -Path "C:\\agent.exe" -Destination "$startupFolder\\agent.exe" -Force
  #   Write-Host "Copied agent.exe to user's startup folder"
    
  #   # Set appropriate permissions
  #   icacls "$startupFolder\\agent.exe" /grant "user:(RX)" /C
  #   Write-Host "Set permissions for agent.exe in startup folder"
  # SHELL

  # Allow all inbound and outbound traffic to agent.exe through Windows Firewall
  config.vm.provision "shell", inline: <<-SHELL
    New-NetFirewallRule -DisplayName "Allow inbound traffic to agent.exe" -Direction Inbound -Program "C:\\agent.exe" -Action Allow
    New-NetFirewallRule -DisplayName "Allow outbound traffic to agent.exe" -Direction Outbound -Program "C:\\agent.exe" -Action Allow
    New-NetFirewallRule -DisplayName "Allow inbound traffic to agent.exe in startup folder" -Direction Inbound -Program "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\agent.exe" -Action Allow
    New-NetFirewallRule -DisplayName "Allow outbound traffic to agent.exe in startup folder" -Direction Outbound -Program "C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\agent.exe" -Action Allow
  SHELL

  # Run agent.exe when the machine is first run
  # config.vm.provision "shell", inline: <<-SHELL
  #   Start-Process -FilePath "C:\\agent.exe"
  # SHELL

  # Restart the virtual machine after provisioning is complete
  config.vm.provision "shell", inline: <<-SHELL
    Write-Host "All configuration completed. Restarting the virtual machine..."
    # Schedule a restart in 10 seconds to allow Vagrant to finish provisioning
    shutdown /r /t 10 /f /c "Restarting after initial configuration"
  SHELL
end