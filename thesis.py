"""
This file was automatically generated by akf-translate.

Verify that the generated code is correct before running it.
"""

from akf_windows.api.chromium import ChromiumServiceAPI
from akflib.core.hypervisor.vbox import VBoxExportFormatEnum
from akflib.core.hypervisor.vbox import VBoxHypervisor
from pathlib import Path
import logging
import random
import sys
import time

# Set up logging
logging.basicConfig(
    handlers=[logging.StreamHandler(sys.stdout)],
    level=logging.INFO,
    format="%(filename)s:%(lineno)d | %(asctime)s | [%(levelname)s] - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger()

# Instantiate a hypervisor object tied to a specific virtual machine
logger.info(r'Executing action: Instantiate a hypervisor object tied to a specific virtual machine')
vbox_obj = VBoxHypervisor("akf-windows-1")

# Start the virtual machine
logger.info(r'Executing action: Start the virtual machine')
vbox_obj.start_vm(wait_for_guest_additions=True)

# Visit a single website
logger.info(r'Executing action: Visit a single website')
with ChromiumServiceAPI.auto_connect(vbox_obj.get_maintenance_ip()) as chromium_service:
    urls = [
        "https://www.google.com",
    ]

    chromium_service.kill_edge()
    chromium_service.set_browser("msedge")
    page = chromium_service.browser.new_page()

    for url in urls:
        page.goto(url)
        time.sleep(5 + random.randint(-0, 0))

# Stop the virtual machine
logger.info(r'Executing action: Stop the virtual machine')
vbox_obj.stop_vm(force=False)

# Export the virtual machine to a disk image
logger.info(r'Executing action: Export the virtual machine to a disk image')
vbox_obj.create_disk_image(
    Path("C:/Users/user/Desktop/akf-windows_1.raw"),
    VBoxExportFormatEnum.RAW
)


