"""
This file was automatically generated by akf-translate.

Verify that the generated code is correct before running it.
"""

import logging
import random
import sys
import time
from pathlib import Path

from akflib.core.hypervisor.vbox import VBoxExportFormatEnum, VBoxHypervisor
from akflib.rendering.core import bundle_to_pdf, get_pandoc_path, get_renderer_classes
from akflib.rendering.objs import AKFBundle

from akf_windows.api.artifacts import WindowsArtifactServiceAPI
from akf_windows.api.chromium import ChromiumServiceAPI

# Set up logging
logging.basicConfig(
    handlers=[logging.StreamHandler(sys.stdout)],
    level=logging.INFO,
    format="%(filename)s:%(lineno)d | %(asctime)s | [%(levelname)s] - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger()

# Create a new CASE bundle to be reused throughout the scenario
logger.info(
    r"Executing action: Create a new CASE bundle to be reused throughout the scenario"
)
akf_bundle = AKFBundle()

# Instantiate a hypervisor object tied to a specific virtual machine
logger.info(
    r"Executing action: Instantiate a hypervisor object tied to a specific virtual machine"
)
vbox_obj = VBoxHypervisor("akf-windows-1", akf_bundle)

# Start the virtual machine
logger.info(r"Executing action: Start the virtual machine")
vbox_obj.start_vm(wait_for_guest_additions=True)

# Start a shared Chromium service
logger.info(r"Executing action: Start a shared Chromium service")
chromium_service = ChromiumServiceAPI.auto_connect(vbox_obj.get_maintenance_ip())

# Visit a single website
logger.info(r"Executing action: Visit a single website")
urls = [
    "https://www.google.com",
]

chromium_service.kill_edge()
chromium_service.set_browser("msedge")
page = chromium_service.browser.new_page()

for url in urls:
    page.goto(url)
    time.sleep(5 + random.randint(-0, 0))

# Visit a list of websites from a file
logger.info(r"Executing action: Visit a list of websites from a file")
url_path = Path("scenarios/sample_urls.txt")
if not url_path.exists():
    raise FileNotFoundError("File scenarios/sample_urls.txt does not exist.")
if not url_path.is_file():
    raise ValueError("scenarios/sample_urls.txt is not a file.")
if url_path.stat().st_size == 0:
    raise ValueError("scenarios/sample_urls.txt is empty.")

with open(url_path, "rt") as f:
    urls = [line.strip() for line in f.readlines()]
chromium_service.kill_edge()
chromium_service.set_browser("msedge")
page = chromium_service.browser.new_page()

for url in urls:
    page.goto(url)
    time.sleep(5 + random.randint(-0, 0))

# Generate CASE browser artifacts
logger.info(r"Executing action: Generate CASE browser artifacts")
history = chromium_service.get_history("msedge", None)
akf_bundle.add_object(history)

# Stop the shared Chromium service
logger.info(r"Executing action: Stop the shared Chromium service")
chromium_service.rpyc_conn.close()

# Collect prefetch files
logger.info(r"Executing action: Collect prefetch files")
with WindowsArtifactServiceAPI.auto_connect(
    vbox_obj.get_maintenance_ip()
) as win_artifact:
    prefetch_objs = win_artifact.collect_prefetch_dir(None)
    akf_bundle.add_objects(prefetch_objs)

# Stop the virtual machine
logger.info(r"Executing action: Stop the virtual machine")
vbox_obj.stop_vm(force=False)

# Export the virtual machine to a disk image
logger.info(r"Executing action: Export the virtual machine to a disk image")
vbox_obj.create_disk_image(
    Path("C:/Users/user/Desktop/akf-windows_1.raw"), VBoxExportFormatEnum.RAW
)

# Export the CASE bundle to a JSON-LD file
logger.info(r"Executing action: Export the CASE bundle to a JSON-LD file")
akf_bundle.write_to_jsonld(Path("scenarios/sample.jsonld"), indent=2)

# Generate a PDF of the CASE bundle
logger.info(r"Executing action: Generate a PDF of the CASE bundle")
renderer_classes = get_renderer_classes(
    [
        "akflib.renderers.prefetch.PrefetchRenderer",
        "akflib.renderers.urlhistory.URLHistoryRenderer",
    ]
)

pandoc_path = get_pandoc_path()
if pandoc_path is None:
    raise RuntimeError(
        "Unable to find path to Pandoc executable (make sure it is on PATH)"
    )

pandoc_output_folder = Path("scenarios")
pandoc_output_folder.mkdir(parents=True, exist_ok=True)

bundle_to_pdf(
    akf_bundle,
    renderer_classes,
    pandoc_output_folder,
    pandoc_path,
    group_renderers=False,
)
