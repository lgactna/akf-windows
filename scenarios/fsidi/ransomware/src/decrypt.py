# Simple ransomware decryption tool that decrypts files encrypted with AES-CBC-128.
# This tool requires the key/salt and IV used for encryption.
#
# Wholly generated by ChatGPT.

import argparse
import os
import winreg
from pathlib import Path

from Cryptodome.Cipher import AES
from Cryptodome.Protocol.KDF import PBKDF2
from Cryptodome.Util.Padding import unpad


def get_downloads_path() -> Path:
    user_profile = os.getenv("USERPROFILE")
    if user_profile is None:
        raise RuntimeError("USERPROFILE environment variable not set?")

    return Path(user_profile) / "Downloads"


def get_machine_guid() -> str:
    """
    Retrieves the MachineGuid from the Windows registry.

    Returns:
        str: The MachineGuid value

    Raises:
        RuntimeError: If the registry key cannot be accessed or the value doesn't exist
    """
    try:
        key_path = "SOFTWARE\\Microsoft\\Cryptography"
        registry_key = winreg.OpenKey(
            winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ
        )
        machine_guid, _ = winreg.QueryValueEx(registry_key, "MachineGuid")
        winreg.CloseKey(registry_key)

        assert isinstance(machine_guid, str)
        return machine_guid
    except WindowsError as e:
        raise RuntimeError(f"Failed to retrieve MachineGuid from registry: {e}")


def check_username(target: str) -> bool:
    """
    Check if the username is "user".
    """
    username = os.getenv("USERNAME")
    if username is None:
        raise RuntimeError("USERNAME environment variable not set??")
    return username == target


def decrypt_files(
    salt_hex: str,
    iv_hex: str,
    use_machine_guid: bool = True,
    key_hex: str | None = None,
) -> int:
    """
    Decrypt all files with .enc extension in the Downloads folder.

    Args:
        salt_hex: Hexadecimal string of the salt used for key derivation
        iv_hex: Hexadecimal string of the IV used for encryption
        use_machine_guid: Whether to derive key from MachineGuid (default: True)
        key_hex: Hexadecimal string of the key (if not using MachineGuid)

    Returns:
        int: Number of files successfully decrypted
    """
    # Convert hex strings to bytes
    salt = bytes.fromhex(salt_hex)
    iv = bytes.fromhex(iv_hex)

    # Get or derive the key
    if use_machine_guid:
        machine_guid = get_machine_guid()
        key = PBKDF2(str(machine_guid).encode(), salt, 32, 1000000)
    else:
        if key_hex is None:
            raise ValueError("Key must be provided if not using MachineGuid")
        key = bytes.fromhex(key_hex)

    # Decrypt each file in the Downloads folder
    downloads_path = get_downloads_path().resolve()
    print(f"Decrypting files in {downloads_path}...")

    successfully_decrypted = 0

    for file in downloads_path.iterdir():
        if not file.is_file():
            continue
        if not file.suffix == ".enc":
            continue

        original_filename = file.with_suffix("")

        try:
            # Read the encrypted data
            with open(file, "rb") as fp1:
                encrypted_data = fp1.read()

            # Decrypt the data
            cipher = AES.new(key, AES.MODE_CBC, iv=iv)
            decrypted_data = unpad(cipher.decrypt(encrypted_data), 16)

            # Write the decrypted data to the original filename
            with open(original_filename, "wb") as fp2:
                fp2.write(decrypted_data)

            # Delete the encrypted file
            file.unlink()

            print(f"Decrypted {file} -> {original_filename}")
            successfully_decrypted += 1

        except Exception as e:
            print(f"Error decrypting {file}: {e}")

    return successfully_decrypted


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Decrypt files encrypted by ransomware"
    )
    parser.add_argument(
        "--salt", required=True, help="Hex string of the salt used for encryption"
    )
    parser.add_argument(
        "--iv", required=True, help="Hex string of the IV used for encryption"
    )
    parser.add_argument(
        "--key", help="Hex string of the key (if not using machine GUID)"
    )

    args = parser.parse_args()

    # Just for safety, check username
    if not check_username("user"):
        raise RuntimeError(
            "This program will only run if the username is 'user'. Exiting."
        )

    use_machine_guid = args.key is None

    # Decrypt all files with .enc extension
    num_decrypted = decrypt_files(
        salt_hex=args.salt,
        iv_hex=args.iv,
        use_machine_guid=use_machine_guid,
        key_hex=args.key,
    )

    if num_decrypted > 0:
        print(f"Successfully decrypted {num_decrypted} files.")

        # Delete the ransom note if present
        ransom_note_path = get_downloads_path() / "ransom.txt"
        if ransom_note_path.exists():
            ransom_note_path.unlink()
            print("Deleted ransom note.")
    else:
        print("No files were decrypted.")
